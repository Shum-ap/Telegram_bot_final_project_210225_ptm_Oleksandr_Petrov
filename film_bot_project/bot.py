import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from db.mysql_connector import search_by_keyword
from db.log_writer import log_search

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–º–µ—â–µ–Ω–∏–µ)
user_state = {}

# üîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
def format_film_list(results, start_index=1):
    lines = []
    for i, film in enumerate(results, start=start_index):
        title = film["title"]
        year = film["release_year"]
        description = film.get("description", "")
        lines.append(f"*{i}. {title}* ({year})\n_{description}_\n")
    return "\n".join(lines)

# üé¨ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã.")

# üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text.strip()

    # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Mongo + —Ñ–∞–π–ª
    log_search(user_id, query)

    # –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤
    results = search_by_keyword(query, offset=0)
    user_state[user_id] = {
        "query": query,
        "offset": 0,
        "results": results,
    }

    if not results:
        await update.message.reply_text("‚ùå –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    reply_text = format_film_list(results)
    keyboard = [[InlineKeyboardButton("‚û° –î–∞–ª–µ–µ", callback_data="next_page")]]
    await update.message.reply_text(
        reply_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


# ‚è≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if user_id not in user_state:
        await query.edit_message_text("üîÑ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        return

    state = user_state[user_id]
    offset = state["offset"] + 10
    new_results = search_by_keyword(state["query"], offset=offset)

    if not new_results:
        await query.edit_message_text("‚úÖ –í—Å–µ —Ñ–∏–ª—å–º—ã –ø–æ–∫–∞–∑–∞–Ω—ã.")
        user_state.pop(user_id)
        return

    user_state[user_id]["offset"] = offset
    user_state[user_id]["results"] = new_results
    reply_text = format_film_list(new_results, start_index=offset + 1)
    keyboard = [[InlineKeyboardButton("‚û° –î–∞–ª–µ–µ", callback_data="next_page")]]

    await query.edit_message_text(
        reply_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))

    app.run_polling()

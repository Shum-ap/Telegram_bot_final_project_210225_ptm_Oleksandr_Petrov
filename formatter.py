from tabulate import tabulate

# üìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ñ–∏–ª—å–º–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ç–∞–±–ª–∏—Ü–∞)
def print_results(results, start_index=1):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ñ–∏–ª—å–º—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å –æ–±—â–µ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π.
    :param results: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ (title, year, description)
    :param start_index: —Å –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    """
    if not results:
        print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n")
        return

    headers = ["#", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ì–æ–¥", "–û–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)"]
    table = [
        [start_index + i, title, year,
         (desc[:100] + "...") if desc and len(desc) > 100 else desc]
        for i, (title, year, desc) in enumerate(results)
    ]
    print(tabulate(table, headers=headers, tablefmt="grid"))
    print()


# üí¨ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è Telegram (Markdown)
def format_film_list(films, start_index=1):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ –≤–∏–¥–µ Markdown-—Å—Ç—Ä–æ–∫–∏
    –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    :param films: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ (title, year, description)
    :param start_index: –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–∞—á–∞–ª–∞ (–ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    :return: —Å—Ç—Ä–æ–∫–∞ Markdown
    """
    lines = []
    for i, (title, year, description) in enumerate(films, start=start_index):
        desc = description or ""
        desc_short = desc[:80].replace("*", "\\*").replace("_", "\\_")
        title_safe = title.replace("*", "\\*").replace("_", "\\_")

        lines.append(f"*{i}. {title_safe}* ({year})\n_{desc_short}_\n")
    return "\n".join(lines)
